1. copiamos la carpeta a usar y la tiramos en la 
terminal, delante colocamos cd y con ello quedamos
ubicados en la carpeta del proyecto activo.
ejem:
cd 'c:\Users\juana\Desktop\Curso Node2\03-ts-basesNode'

2.instalamos typescript de manera global:
npm i -g typescript

3.inicializamos node:
npm init -y

4.Creamos el archivo base app.ts
export const nombre = 'JuanC';

console.log(nombre);

5.Creamos el tsconfig.json:
tsc --init

6.Configuramos el tsconfig.json:
"outDir": "./dist" //carpeta donde se comprime el .json
"sourceMap": true, 
"moduleResolution": "node",  

7.Vamos al app.ts y hacemos tsc, esto creará en la 
carpeta /dist un archivo de javascript compilado
desde typescript.
TAMBIEN PODEMOS HACER EL tsc -w para empezar a 
compilar de manera activa a js. Es mejor al parecer
en estos momentos.

-----------------------------------
YA PODEMOS LLAMAR EL ARCHIVO APP.JS 
-----------------------------------
con node dist/app.js  ó 
ts-node app.ts
con nodemon hacemos (para que siga cambios activamente):
nodemon dist/app.js

8. Configuramos el tslint:
    - npm i tslint --save-dev
    - instalamos typescript de manera local :
        npm i typescript --save-dev
    - Llamamos al tslint: ./node_modules/.bin/tslint --init
    - Vamos al archivo ttslint.json y configuramos 
    una nueva regla:
        "rules": {
        "no-console":false
    },//quedaria asi.

=====================================
SI DESEAMOS LEVANTAR SERVIDORES 
INSTALAMOS EXPRESS Y TODO LO DESEAMOS
COMO SIGUE
=====================================

9. Instalamos express cors dotenv:
npm i express cors dotenv

10. Instalamos express cors dotenv como desarrollo:
npm i --save-dev @types/express 
npm i --save-dev @types/dotenv 

(acá es donde creamos el archivo .env con el proyectoy 
lo impportamos:
import dotenv from 'dotenv'
dotenv.config();
)
11.Intalamos nodemon: en 
este caso parece estar instalado de manera global
y solo haria falta llamarlo

12. Corremos el tsc -w:
vamos a la carpeta del proyecto haciendo cd:
cd 'c:\Users\juana\Desktop\Curso Node2\03-ts-basesNode'
tsc -w ó tsc --watch
//obligatoriamente debe estar en la carpeta de trabajo

LEVANTAR SERVIDOR BUSCAR NPM EXPRESS Y SEGUIR LOS PASOS
TRADUCIENDOLOS AL typescript

==========================================
                   CORS 
==========================================
- Ya instalamas cors pero no las dependencias de desarrollo:
npm install --save @types/cors

[[[[[INFO DE USO EN npm buscar @types/cors]]]]]


======================================================
             USANDO UN CLUSTER DE ATLASDB
======================================================

//Borrar es clave para prueba cruster
usuarios
user_node_cafe
2qFu1aOlX8jMmUJN

1. Accedemos al programa con clave y seleccionamos y creamos un cluster gratuito.
2. Una vez creado, creamos un usuario en la parte de database Acccess, dicho usuario
se coloca en el .env como 
USER=user_node_cafe
PASS=2qFu1aOlX8jMmUJN
//esta clave la autogenere con el programa

3. Selecccionamos built-role:
Read and write any database

4.Nos vamos al cluster y seleccionamos conect, pregunta por que medio deseas conectarte
y seleccionamos con compassDB, seleccionamos i have MongoDBcompas.
Copiamos la cadena de conexion en este caso fue:
mongodb+srv://<username>:<password>@miclustercafe.qpyb6ae.mongodb.net/test

5. Nos vamos al .env y la colocamos como sigue:

MONGODB_CNN=mongodb+srv://<username>:<password>@miclustercafe.qpyb6ae.mongodb.net/test

ahora sustituimos el <username> por mi usuario definido user_node_cafe Y
el <password> por 2qFu1aOlX8jMmUJN eliminando los signos de mayor y menor tambien.
Queda asi:

MONGODB_CNN=mongodb+srv://user_node_cafe:2qFu1aOlX8jMmUJN@miclustercafe.qpyb6ae.mongodb.net/test
tambien eliminamos el /test podemos poner cualquier cosa en este caso cafedb
eso seria el nombre de mi base de datos


MONGODB_CNN=mongodb+srv://user_node_cafe:2qFu1aOlX8jMmUJN@miclustercafe.qpyb6ae.mongodb.net/cafeDB

tomamos la direccion: mongodb+srv://user_node_cafe:2qFu1aOlX8jMmUJN@miclustercafe.qpyb6ae.mongodb.net/cafeDB
abrimos el mongodb compas y pegamos donde dice localhost y todo eso el enlace, si ingresa sin errores
habremos creado una base de datos con el cluster
Quedará grabada la BD y podremos empezar a trabajar con ella
Se puede cerrar la pagina ya que trabajaremos con el compass aunque tmb se podria trabajar desde la web

=====================================================
                  USANDO MONGOOSE
=====================================================

1. Vamos a la web de mongoosejs.com y mongoose con typescript
2. Hacemos:
npm i mongoose
3. Instalamos dependencias de desarrollo para mongodb:
npm i --save-dev @types/mongoose
4. Creamos una carpeta llamada database y un archivo config.ts
5. Ahi importamos:
    import "dotenv/config";
    import mongoose, { connect } from "mongoose";
6. Conectamos con una funcion asincrona, puede verse en el ejemplo de la web o como esta en el ejercicio
        
        mongoose.set('strictQuery', false);

        async  function dbConnect(): Promise<void> {
            const MONGODB_CNN = <string>process.env.MONGODB_CNN;
            await connect  (MONGODB_CNN);
        }
        export default dbConnect;
7.  Creamos una interfaz para ayudar con el tipado de los usuarios en una carpeta interfaces
8.  En la carpeta modelos creamos el archivo usuario:
    -Importaos el Schema de mongoose, model y la interface creada de usuario <user>
    -Definimos el Schema como se hizo en el documento.
    -Finalmente creamos la constante a exportar en base al Schema definido y la exportamos por defecto.
9.

